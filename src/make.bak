##########################################################
# Makefile
#
SOURCES.cc = numerical.cc parameters.cc paraccess.cc shells.cc radiation.cc container.cc mergers.cc evolution.cc simulation.cc run.cc
INCLUDE = -I../include/
INCLUDES = $(wildcard ../include/*.hh)
CPP = g++
CFLAGS = 
CPPFLAGS = -O3 
LIBS = 

# the executable file
EFILE= ../ishocks
# Object file
OBJECTS= $(SOURCES.cc:.cc=.o)

all: $(EFILE)


# linking to create the executable file
$(EFILE): $(OBJECTS)
	@echo "linking...." 
	$(CPP) $(CPPFLAGS) -o $(EFILE) $(OBJECTS) $(LIBS)


# this declares dependence for object files
# so only the necessary ones
# if the dependence files changed, the .o file
# will be recompiled

numerical.o: $(INCLUDES) numerical.cc
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c numerical.cc

parameters.o: $(INCLUDES) parameters.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c parameters.cc 

paraccess.o: $(INCLUDES) paraccess.cc
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c paraccess.cc

shells.o: $(INCLUDES) shells.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c shells.cc

radiation.o: $(INCLUDES) radiation.cc shells.cc container.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c radiation.cc

container.o: $(INCLUDES) container.cc shells.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c container.cc

mergers.o: $(INCLUDES) mergers.cc container.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c mergers.cc

evolution.o: $(INCLUDES) evolution.cc mergers.cc simulation.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c evolution.cc

simulation.o: $(INCLUDES) simulation.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c simulation.cc

run.o: $(INCLUDES) run.cc simulation.cc 
	$(CPP) $(CPPFLAGS) $(INCLUDE) -c run.cc

##########################################################
# run "make debug"
# "./debug" will produce "gmon.out"
# "gprof debug" can be used to analyze the output
debug:
	g++ -pg $(OBJECTS) $(LIBS) -o ../$@


# remove the object and executable files
clean:
	rm -f $(EFILE) $(OBJECTS)

spotless:
	rm -f $(EFILE) $(OBJECTS) *~

#
##########################################################